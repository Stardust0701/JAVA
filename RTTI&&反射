1.
  关于RTTI有一条前提就是某个对象的类型信息在编译时必须已知。RTTI的实质就是编译器在遍历检查代码时偷偷将类型信息记录下来并存储，以在运行时能够获得。
现在考虑另一种情况：从磁盘或网络中获取了一串字节，并被告知这串字节代表一个类，也就是这个类是在编译之后得到的，在编译时对这个类一无所知，
那么要如何使用这个类？这就需要反射机制。注意体味下RTTI与反射的不同，一个是编译期确定并知晓的，一个是在运行期才知晓的。

2.
  故RTTI与反射在最底层的思想上是很类似的，本质的区别在于：对RRTI，编译器在编译时打开和检查.class文件，而对反射来说，.class文件在编译时是不可获取的，
在运行时未知对象已经来了再去打开和检查.class文件。

3.
  在Java中，Class对象与java.lang.reflect类库一起对反射的概念进行了支持。通过反射机制，匿名对象的类信息能在运行时被完全确定下来，
尽管在编译时对其一无所知。反射也是需要使用class对象的，所以又回到了获得class对象的前提：先加载.class文件。
所以使用反射机制与一个未知类型的对象打交道时，其类的.class文件对于JVM来说必须是可获取的，要么在本机上，要么通过网络取得。


4.
  例如：
List<RtsTaskMasterEntity> listTaskMaster = rtsTaskMasterService.queryByWhere(" code = '" + command + "' ");
	if (listTaskMaster.size() <= 0) {
		throw new BusinessException("未维护任务档案！");
	}
	RtsTaskMasterEntity taskMaster = listTaskMaster.get(0);
	RtsCmdTask task = (RtsCmdTask) Class.forName(taskMaster.getClassname()).newInstance();
	...
	task.initTask();

在查询出taskMaster 时 并不知道其具体类型，但是通过反射可以实例化对应的对象，使之进行各自的初始化动作，很巧妙；
